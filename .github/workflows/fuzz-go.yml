name: Run Go fuzz tests

on:
  workflow_call:
    inputs:
      directory:
        description: "Directory to search for Go fuzz tests in."
        default: "."
        required: false
        type: string
      fuzz-time:
        description: "Time to run the Fuzz test for. (for example, 5m)"
        required: true
        type: string
      create-issue:
        description: "Whether an issue should be created for new failures."
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  find-tests:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.find-tests.outputs.tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Find fuzz tests
        id: find-tests
        run: |
          TEST_FILES=$(find "${DIRECTORY}" -name '*_test.go' -not -path './vendor/*')

          RESULTS=()

          for FILE in $TEST_FILES; do
            FUZZ_FUNCS=$(grep -E 'func Fuzz\w*' $FILE | sed 's/func //' | sed 's/(.*$//')
            if [ -z "$FUZZ_FUNCS" ]; then
              continue
            fi

            PACKAGE_PATH=$(dirname ${FILE#${DIRECTORY}/})
            for FUZZ_FUNC in $FUZZ_FUNCS; do
              if [ -z "$FUZZ_FUNC" ]; then
                continue
              fi

              RESULTS+=("{\"package\":\"$PACKAGE_PATH\",\"function\":\"$FUZZ_FUNC\"}")
              echo "Found $FUZZ_FUNC in $PACKAGE_PATH"
            done
          done

          NUM_RESULTS=${#RESULTS[@]}
          INCLUDE_STRING=""
          for (( i=0; i<$NUM_RESULTS; i++ )); do
            INCLUDE_STRING+="${RESULTS[$i]}"

            if [[ $i -lt $(($NUM_RESULTS-1)) ]]; then
              INCLUDE_STRING+=","
            fi
          done

          echo 'tests=['$INCLUDE_STRING']' >> $GITHUB_OUTPUT
        env:
          DIRECTORY: ${{ inputs.directory }}

  fuzz:
    name: "${{ matrix.package }}: ${{ matrix.function }}"
    runs-on: ubuntu-latest
    needs: [find-tests]
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.find-tests.outputs.tests) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod
          cache: false

      - name: Find cache location
        run: echo "FUZZ_CACHE=$(go env GOCACHE)/fuzz" >> $GITHUB_ENV

      - name: Restore fuzz cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ env.FUZZ_CACHE }}
          key: fuzz-${{ matrix.package }}-${{ matrix.function }}-${{ github.sha }}
          restore-keys: |
            fuzz-${{ matrix.package }}-${{ matrix.function }}-

      - name: Fuzz
        run: |
          # Change directory to the package first, since go test doesn't
          # support cross-module testing, and the provided directory may be in
          # a different module.
          cd "${{ matrix.package }}"
          go test -fuzz="${{ matrix.function }}\$" -run="${{ matrix.function }}\$" -fuzztime="${FUZZ_TIME}" .
        env:
          FUZZ_TIME: ${{ inputs.fuzz-time }}

      # Fuzzing may have failed because of an existing bug, or it may have
      # found a new one and written a new test case file in testdata/ relative
      # to the package.
      #
      # If that file was written, we should save it as an artifact and then
      # create an issue.

      - name: Check for new fuzz failure
        id: new-failure
        if: ${{ failure() }}
        run: |
          UNTRACKED=$(git ls-files . --exclude-standard --others)
          if [ -z "$UNTRACKED" ]; then
            exit 0
          fi
          echo "Found new fuzz failure: $UNTRACKED"
          echo "file=$UNTRACKED" >> $GITHUB_OUTPUT
          echo "name=$(basename $UNTRACKED)" >> $GITHUB_OUTPUT
          echo "package=$(echo ${{ matrix.package }} | sed 's/\//_/g')" >> $GITHUB_OUTPUT
          echo "function=${{ matrix.function }}" >> $GITHUB_OUTPUT

      - name: Upload fuzz failure as artifact
        id: artifact
        if: ${{ failure() && steps.new-failure.outputs.file != '' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: failure-${FAILED_PACKAGE}-${FAILED_FUNCTION}
          path: ${{ steps.new-failure.outputs.file }}

      - name: Generate reproduction instructions
        if: ${{ failure() && steps.new-failure.outputs.file != '' }}
        run: |
          cat >>$GITHUB_STEP_SUMMARY <<EOF
          ## Fuzz test failed

          A new fuzz test failure was found in ${{ matrix.package }}.

          To reproduce the failure locally, run the following command using the GitHub CLI to download the failed test case:

          <pre lang="bash">gh run download --repo ${{ github.repository }} ${{ github.run_id }} -n failure-${FAILED_PACKAGE}-${FAILED_FILE} --dir ${{ matrix.package }}/testdata/fuzz/${{ matrix.function }}</pre>

          When opening a PR with the fix, please include the test case file in your PR to prevent regressions.
          EOF
        env:
          FAILED_FUNCTION: ${{ steps.new-failure.outputs.function }}
          FAILED_PACKAGE: ${{ steps.new-failure.outputs.package }}

      - name: Create new issue
        if: ${{ failure() && steps.new-failure.outputs.file != '' && inputs.create-issue }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const failureName = "${FAILED_NAME}";
            const issueTitle = `${{ matrix.package }}: ${{ matrix.function }} failed (${failureName})`;

            // Look for existing issue first with the same title.
            const issues = await github.rest.search.issuesAndPullRequests({
              q: `is:issue is:open repo:${{ github.repository }} in:title "${failureName}"`
            })
            const issue = issues.data.items.find((issue) => issue.title === issue.title);
            if (issue) {
              return;
            }

            // Create a new issue.
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: `
            A new fuzz test failure was found in <code>${{ matrix.package }}</code>.

            To reproduce the failure locally, run the following command using the GitHub CLI to download the failed test case:

            <pre lang="bash">gh run download --repo ${{ github.repository }} ${{ github.run_id }} -n failure-${FAILED_PACKAGE}-${FAILED_FUNCTION} --dir ${{ matrix.package }}/testdata/fuzz/${{ matrix.function }}</pre>

            When opening a PR with the fix, please include the test case file in your PR to prevent regressions.

            [Link to failed run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `,

              labels: ['bug'],
            })
        env:
          FAILED_NAME: ${{ steps.new-failure.outputs.name }}
          FAILED_FUNCTION: ${{ steps.new-failure.outputs.function }}
          FAILED_PACKAGE: ${{ steps.new-failure.outputs.function }}
