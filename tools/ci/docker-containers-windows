#!/usr/bin/env bash
#
# This script builds and pushes windows Docker containers.
#
# This script expects to be run from the repo root and has checks for running
# from a Drone trigger.

set -euxo pipefail

# Environment variables used throughout this script. These must be set
# otherwise bash will fail with an "unbound variable" error because of the `set
# -u` flag on the above line.
#
# If the environment variables are unset, the variables below default to an
# empty string.
export TARGET_CONTAINER=${1:-}
export DRONE_TAG=${DRONE_TAG:-}

export RELEASE_ALLOY_IMAGE=grafana/alloy
export DEVEL_ALLOY_IMAGE=grafana/alloy-dev

if [ -n "$DRONE_TAG" ]; then
  VERSION=$DRONE_TAG
else
  # NOTE(rfratto): Do not use ./tools/image-tag-docker here, which doesn't
  # produce valid semver.
  VERSION=$(./tools/image-tag)
fi

# DEFAULT_LATEST is the default tag to use for the "latest" tag.
DEFAULT_LATEST=nanoserver-1809
CNGCRYPTO_LATEST=nanoserver-1809-cngcrypto

# The VERSION_TAG is the version to use for the Docker tag. It is sanitized to
# force it to be a valid Docker tag name (primarily by removing the +
# characters that may have been emitted by ./tools/image-tag).
VERSION_TAG=${VERSION//+/-}-nanoserver-1809

# We also need to know which "branch tag" to update. Branch tags are used as a
# secondary tag for Docker containers. The branch tag is "latest" when being
# tagged from a stable release (i.e., not a release candidate) or when building
# a dev image.
#
# If we're not running from drone, we'll set the branch tag to match the
# version. This effectively acts as a no-op because it will tag the same Docker
# image twice.
if [[ -n "$DRONE_TAG" && "$DRONE_TAG" != *"-rc."* ]] || [[ "$TARGET_CONTAINER" == *"-devel"* ]]; then
  BRANCH_TAG=$DEFAULT_LATEST
else
  BRANCH_TAG=$VERSION_TAG
fi

case "$TARGET_CONTAINER" in
  alloy)
    docker build                             \
      -t "$RELEASE_ALLOY_IMAGE:$VERSION_TAG" \
      -t "$RELEASE_ALLOY_IMAGE:$BRANCH_TAG"  \
      --build-arg VERSION="$VERSION"         \
      --build-arg RELEASE_BUILD=1            \
      -f ./Dockerfile.windows                \
      .

    docker push "$RELEASE_ALLOY_IMAGE:$VERSION_TAG"
    docker push "$RELEASE_ALLOY_IMAGE:$BRANCH_TAG"
    ;;

  alloy-cngcrypto)
    if [[ "$BRANCH_TAG" == "$DEFAULT_LATEST" ]]; then
      BRANCH_TAG=$CNGCRYPTO_LATEST
    fi

    docker build                             \
      -t "$RELEASE_ALLOY_IMAGE:$VERSION_TAG-cngcrypto" \
      -t "$RELEASE_ALLOY_IMAGE:$BRANCH_TAG"  \
      --build-arg VERSION="$VERSION"         \
      --build-arg RELEASE_BUILD=1            \
      --build-arg GOEXPERIMENT=cngcrypto     \
      --build-arg GO_TAGS=cngcrypto          \
      -f ./Dockerfile.windows                \
      .

    docker push "$RELEASE_ALLOY_IMAGE:$VERSION_TAG"
    docker push "$RELEASE_ALLOY_IMAGE:$BRANCH_TAG"
    ;;

  alloy-devel)
    docker build                           \
      -t "$DEVEL_ALLOY_IMAGE:$VERSION_TAG" \
      -t "$DEVEL_ALLOY_IMAGE:$BRANCH_TAG"  \
      --build-arg VERSION="$VERSION"       \
      --build-arg RELEASE_BUILD=1          \
      -f ./Dockerfile.windows              \
      .

    docker push "$DEVEL_ALLOY_IMAGE:$VERSION_TAG"
    docker push "$DEVEL_ALLOY_IMAGE:$BRANCH_TAG"
    ;;

  alloy-devel-cngcrypto)
    if [[ "$BRANCH_TAG" == "$DEFAULT_LATEST" ]]; then
      BRANCH_TAG=$CNGCRYPTO_LATEST
    fi

    docker build                           \
      -t "$DEVEL_ALLOY_IMAGE:$VERSION_TAG-cngcrypto" \
      -t "$DEVEL_ALLOY_IMAGE:$BRANCH_TAG"  \
      --build-arg VERSION="$VERSION"       \
      --build-arg RELEASE_BUILD=1          \
      --build-arg GOEXPERIMENT=cngcrypto   \
      --build-arg GO_TAGS=cngcrypto        \
      -f ./Dockerfile.windows              \
      .

    docker push "$DEVEL_ALLOY_IMAGE:$VERSION_TAG"
    docker push "$DEVEL_ALLOY_IMAGE:$BRANCH_TAG"
    ;;

  *)
    echo "Usage: $0 alloy|alloy-cngcrypto|alloy-devel|alloy-devel-cngcrypto"
    exit 1
    ;;
esac
