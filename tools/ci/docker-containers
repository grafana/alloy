#!/usr/bin/env bash
#
# This script builds and pushes cross-platform Docker containers. Maintainers
# should *not* run this locally since it pushes the containers.
#
# This script expects to be run from the repo root and has checks for running
# from a Drone trigger.
set -euxo pipefail

RELEASE_ALLOY_IMAGE=grafana/alloy
DEVELOPMENT_ALLOY_IMAGE=us-docker.pkg.dev/grafanalabs-dev/docker-alloy-dev/alloy

DEFAULT_ALLOY_IMAGE=${RELEASE_ALLOY_IMAGE}

# Environment variables used throughout this script. These must be set
# otherwise bash will fail with an "unbound variable" error because of the `set
# -u` flag on the above line.
#
# If the environment variables are unset, the variables below default to an
# empty string.
export TARGET_CONTAINER=${1:-}
export DRONE_TAG=${DRONE_TAG:-}
export DEVELOPMENT=${DEVELOPMENT:-}

if [ -n "$DEVELOPMENT" ]; then
  DEFAULT_ALLOY_IMAGE=${DEVELOPMENT_ALLOY_IMAGE}
fi

export ALLOY_IMAGE=${DEFAULT_ALLOY_IMAGE}

# We need to determine what version to assign to built binaries. If containers
# are being built from a Drone tag trigger, we force the version to come from the
# Drone tag name.
#
# Otherwise, we use the ./tools/image-tag script to determine the version.
if [ -n "$DRONE_TAG" ]; then
  VERSION=$DRONE_TAG
else
  VERSION=$(./tools/image-tag)
fi

# The TAG_VERSION is the version to use for the Docker tag. It is sanitized to
# force it to be a valid tag name; ./tools/image-tag can emit characters that
# are valid for semver but invalid for Docker tags, such as +.
TAG_VERSION=${VERSION//+/-}

# We also need to know which "branch tag" to update. Branch tags are used as a
# secondary tag for Docker containers. The branch tag is "latest" when being
# tagged from a stable release (i.e., not a release candidate).
#
# If we're not running from drone, we'll set the branch tag to match the
# version. This effectively acts as a no-op because it will tag the same Docker
# image twice.
if [ -n "$DRONE_TAG" ] && [[ "$DRONE_TAG" != *"-rc."* ]]; then
  BRANCH_TAG=latest
else
  BRANCH_TAG=$TAG_VERSION
fi

# Build all of our images.

export BUILD_PLATFORMS=linux/amd64,linux/arm64,linux/ppc64le,linux/s390x

case "$TARGET_CONTAINER" in
  alloy)
    docker buildx build --push        \
      --platform $BUILD_PLATFORMS     \
      --build-arg RELEASE_BUILD=1     \
      --build-arg VERSION="$VERSION"  \
      -t "$ALLOY_IMAGE:$TAG_VERSION"  \
      -t "$ALLOY_IMAGE:$BRANCH_TAG"   \
      -f cmd/alloy/Dockerfile \
      .
    ;;

  *)
    echo "Usage: $0 alloy"
    exit 1
    ;;
esac

