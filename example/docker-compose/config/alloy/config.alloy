// This file serves as an example Alloy configuration to interact with the
// Docker Compose environment.
//
// This configuration works whether you are running Alloy locally or within the
// Docker Compose environment when the `alloy` profile is enabled.

logging {
	level = "debug"

	// Forward internal logs to the local Loki instance.
	write_to = [loki.process.example.receiver]
}

loki.process "example" {
   forward_to = [loki.relabel.alloy_logs.receiver]

      stage.labels {
        values = {
            version = string.format("Hello%s", constants.version),
        }
    }
}

loki.relabel "alloy_logs"{


	rule {
		target_label = "instance"
		replacement = string.format("version%s", constants.version)
	}

	rule {
		target_label = "job"
		replacement = "integrations/self"
	}

	forward_to = [loki.write.loki.receiver]
}

tracing {
	// Write all spans. Don't do this in production!
	sampling_fraction = 1.0

	// Forward internal spans to the local Tempo instance.
	write_to = [otelcol.exporter.otlp.local.input]
}

// Collect metrics from the local running Alloy instance and forward to
// Prometheus.
prometheus.exporter.self "alloy" {}
prometheus.scrape "alloy" {
	targets    = prometheus.exporter.self.alloy.targets
	forward_to = [prometheus.relabel.alloy_metrics.receiver]
}

// Additional scraping of Alloy's HTTP metrics endpoint for conflict testing
prometheus.scrape "alloy_http_endpoint" {
	job_name = "alloy_scrapes_flow_runtime"
	targets = [
		{
			"__address__" = "localhost:12345",
			"__metrics_path__" = "/metrics",
		},
	]
	scrape_interval = "15s"
	forward_to = [prometheus.relabel.alloy_http_metrics.receiver]	
}

// Scrape OTel Collector's Prometheus metrics endpoint for cross-runtime testing
prometheus.scrape "otel_collector_metrics" {
	job_name = "alloy_scrapes_otel_runtime"
	targets = [
		{
			"__address__" = "localhost:8888",
			"__metrics_path__" = "/metrics",
		},
	]
	scrape_interval = "15s"
	forward_to = [prometheus.relabel.otel_collector_metrics.receiver]	
}

// Collect profiles from the local running Alloy instance and forward to
// Pyroscope.
pyroscope.scrape "default" {
  targets = [
    {"__address__" = "localhost:12345", "service_name" = "alloy"},
  ]
  forward_to = [pyroscope.write.pyroscope.receiver]
}

// Relabel rules for Alloy self-monitoring metrics
prometheus.relabel "alloy_metrics" {
	rule {
		target_label = "source"
		replacement = "flow_mode_scraping_flow_mode_self_exporter"
	}

	forward_to = [prometheus.remote_write.mimir.receiver]
}

// Relabel rules for Alloy HTTP endpoint metrics
prometheus.relabel "alloy_http_metrics" {
	rule {
		target_label = "source"
		replacement = "flow_mode_scraping_flow_mode"
	}

	forward_to = [prometheus.remote_write.mimir.receiver]
}

// Relabel rules for OTel Collector metrics
prometheus.relabel "otel_collector_metrics" {
	rule {
		target_label = "source"
		replacement = "flow_mode_scraping_otel_mode"
	}

	forward_to = [prometheus.remote_write.mimir.receiver]
}

prometheus.remote_write "mimir" {
	endpoint {
		url = string.format(
			"http://%s/api/v1/push",
			coalesce(sys.env("REMOTE_WRITE_HOST"), "localhost:9009"),
		)
	}
}

loki.write "loki" {
	endpoint {
		url = string.format(
			"http://%s/loki/api/v1/push",
			coalesce(sys.env("LOKI_HOST"), "localhost:3100"),
		)
	}
}

otelcol.exporter.otlp "local" {
	client {
		// Send to local OTLP receiver (as defined in config-otel.yaml).
		endpoint = "localhost:4317"

		tls {
			insecure = true
		}
	}
}

pyroscope.write "pyroscope" {
	endpoint {
		url = string.format(
			"http://%s",
			coalesce(sys.env("PYROSCOPE_HOST"), "localhost:4040"),
		)
	}
}
