package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/grafana/alloy/internal/service/graphql/graph/model"
	"github.com/grafana/alloy/internal/service/graphql/utils"
)

// Components is the resolver for the components field.
func (r *queryResolver) Components(ctx context.Context) ([]model.Component, error) {
	allComponents, err := utils.GetAllComponents(r.Host)
	if err != nil {
		return nil, err
	}

	result := make([]model.Component, len(allComponents))
	for i, comp := range allComponents {
		result[i] = model.NewComponent(comp)
	}

	return result, nil
}

// Component is the resolver for the component field.
func (r *queryResolver) Component(ctx context.Context, id string) (*model.Component, error) {
	allComponents, err := utils.GetAllComponents(r.Host)
	if err != nil {
		return nil, err
	}

	for _, comp := range allComponents {
		if comp.ID.String() == id {
			result := model.NewComponent(comp)
			return &result, nil
		}
	}

	// Component not found
	return nil, nil
}
