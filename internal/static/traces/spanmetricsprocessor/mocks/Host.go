// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	component "go.opentelemetry.io/collector/component"
)

// Host is an autogenerated mock type for the Host type
type Host struct {
	mock.Mock
}

// GetExporters provides a mock function with given fields:
func (_m *Host) GetExporters() map[component.DataType]map[component.ID]component.Component {
	ret := _m.Called()

	var r0 map[component.DataType]map[component.ID]component.Component
	if rf, ok := ret.Get(0).(func() map[component.DataType]map[component.ID]component.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[component.DataType]map[component.ID]component.Component)
		}
	}

	return r0
}

// GetExtensions provides a mock function with given fields:
func (_m *Host) GetExtensions() map[component.ID]component.Component {
	ret := _m.Called()

	var r0 map[component.ID]component.Component
	if rf, ok := ret.Get(0).(func() map[component.ID]component.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[component.ID]component.Component)
		}
	}

	return r0
}

// GetFactory provides a mock function with given fields: kind, componentType
func (_m *Host) GetFactory(kind component.Kind, componentType component.Type) component.Factory {
	ret := _m.Called(kind, componentType)

	var r0 component.Factory
	if rf, ok := ret.Get(0).(func(component.Kind, component.Type) component.Factory); ok {
		r0 = rf(kind, componentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(component.Factory)
		}
	}

	return r0
}

// ReportFatalError provides a mock function with given fields: err
func (_m *Host) ReportFatalError(err error) {
	_m.Called(err)
}
