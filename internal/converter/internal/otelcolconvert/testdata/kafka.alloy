otelcol.receiver.kafka "default" {
	brokers          = ["broker:9092"]
	protocol_version = "2.0.0"

	authentication {
		plaintext {
			username = "fakeusername"
			password = "fakepassword"
		}

		sasl {
			username  = "fakeusername"
			password  = "fakepassword"
			mechanism = "AWS_MSK_IAM"
			version   = 1

			aws_msk {
				region      = "us-east-1"
				broker_addr = "broker:9092"
			}
		}

		tls {
			insecure = true
		}

		kerberos {
			service_name = "someservice"
			realm        = "myrealm"
			username     = "fakeusername"
			password     = "fakepassword"
		}
	}

	output {
		metrics = [otelcol.exporter.kafka.default.input]
		logs    = [otelcol.exporter.kafka.default.input]
		traces  = [otelcol.exporter.kafka.default.input]
	}
}

otelcol.exporter.kafka "default" {
	protocol_version                         = "2.0.0"
	brokers                                  = ["redpanda:9092"]
	resolve_canonical_bootstrap_servers_only = true
	client_id                                = "otelcol"
	topic_from_attribute                     = "my_topic"
	encoding                                 = "otlp_json"
	partition_traces_by_id                   = true
	partition_metrics_by_resource_attributes = true
	timeout                                  = "11s"

	authentication {
		plaintext {
			username = "fakeusername"
			password = "fakepassword"
		}

		sasl {
			username  = "fakeusername"
			password  = "fakepassword"
			mechanism = "SCRAM-SHA-256"
			version   = 1

			aws_msk {
				region      = "us-east-1"
				broker_addr = "broker:9092"
			}
		}

		tls {
			insecure = true
		}

		kerberos {
			service_name = "someservice"
			realm        = "myrealm"
			username     = "fakeusername"
			password     = "fakepassword"
		}
	}

	producer {
		max_message_bytes  = 1000001
		compression        = "snappy"
		flush_max_messages = 11
	}
}
