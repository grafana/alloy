package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BucketSpan) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Offset":
			z.Offset, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "Length":
			z.Length, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z BucketSpan) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Offset"
	err = en.Append(0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Offset)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	// write "Length"
	err = en.Append(0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Length)
	if err != nil {
		err = msgp.WrapError(err, "Length")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BucketSpan) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Offset"
	o = append(o, 0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o = msgp.AppendInt32(o, z.Offset)
	// string "Length"
	o = append(o, 0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	o = msgp.AppendUint32(o, z.Length)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BucketSpan) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Offset":
			z.Offset, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "Length":
			z.Length, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BucketSpan) Msgsize() (s int) {
	s = 1 + 7 + msgp.Int32Size + 7 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FloatHistogram) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Count":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
				switch msgp.UnsafeString(field) {
				case "IsInt":
					z.Count.IsInt, err = dc.ReadBool()
					if err != nil {
						err = msgp.WrapError(err, "Count", "IsInt")
						return
					}
				case "IntValue":
					z.Count.IntValue, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "Count", "IntValue")
						return
					}
				case "FloatValue":
					z.Count.FloatValue, err = dc.ReadFloat64()
					if err != nil {
						err = msgp.WrapError(err, "Count", "FloatValue")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Count")
						return
					}
				}
			}
		case "Sum":
			z.Sum, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
		case "Schema":
			z.Schema, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Schema")
				return
			}
		case "ZeroThreshold":
			z.ZeroThreshold, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "ZeroThreshold")
				return
			}
		case "ZeroCount":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ZeroCount")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "ZeroCount")
					return
				}
				switch msgp.UnsafeString(field) {
				case "IsInt":
					z.ZeroCount.IsInt, err = dc.ReadBool()
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "IsInt")
						return
					}
				case "IntValue":
					z.ZeroCount.IntValue, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "IntValue")
						return
					}
				case "FloatValue":
					z.ZeroCount.FloatValue, err = dc.ReadFloat64()
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "FloatValue")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount")
						return
					}
				}
			}
		case "NegativeSpans":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NegativeSpans")
				return
			}
			if cap(z.NegativeSpans) >= int(zb0004) {
				z.NegativeSpans = (z.NegativeSpans)[:zb0004]
			} else {
				z.NegativeSpans = make([]BucketSpan, zb0004)
			}
			for za0001 := range z.NegativeSpans {
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "NegativeSpans", za0001)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "NegativeSpans", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Offset":
						z.NegativeSpans[za0001].Offset, err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001, "Offset")
							return
						}
					case "Length":
						z.NegativeSpans[za0001].Length, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001, "Length")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001)
							return
						}
					}
				}
			}
		case "NegativeDeltas":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NegativeDeltas")
				return
			}
			if cap(z.NegativeDeltas) >= int(zb0006) {
				z.NegativeDeltas = (z.NegativeDeltas)[:zb0006]
			} else {
				z.NegativeDeltas = make([]int64, zb0006)
			}
			for za0002 := range z.NegativeDeltas {
				z.NegativeDeltas[za0002], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "NegativeDeltas", za0002)
					return
				}
			}
		case "NegativeCounts":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NegativeCounts")
				return
			}
			if cap(z.NegativeCounts) >= int(zb0007) {
				z.NegativeCounts = (z.NegativeCounts)[:zb0007]
			} else {
				z.NegativeCounts = make([]float64, zb0007)
			}
			for za0003 := range z.NegativeCounts {
				z.NegativeCounts[za0003], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "NegativeCounts", za0003)
					return
				}
			}
		case "PositiveSpans":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PositiveSpans")
				return
			}
			if cap(z.PositiveSpans) >= int(zb0008) {
				z.PositiveSpans = (z.PositiveSpans)[:zb0008]
			} else {
				z.PositiveSpans = make([]BucketSpan, zb0008)
			}
			for za0004 := range z.PositiveSpans {
				var zb0009 uint32
				zb0009, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "PositiveSpans", za0004)
					return
				}
				for zb0009 > 0 {
					zb0009--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "PositiveSpans", za0004)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Offset":
						z.PositiveSpans[za0004].Offset, err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004, "Offset")
							return
						}
					case "Length":
						z.PositiveSpans[za0004].Length, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004, "Length")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004)
							return
						}
					}
				}
			}
		case "PositiveDeltas":
			var zb0010 uint32
			zb0010, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PositiveDeltas")
				return
			}
			if cap(z.PositiveDeltas) >= int(zb0010) {
				z.PositiveDeltas = (z.PositiveDeltas)[:zb0010]
			} else {
				z.PositiveDeltas = make([]int64, zb0010)
			}
			for za0005 := range z.PositiveDeltas {
				z.PositiveDeltas[za0005], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "PositiveDeltas", za0005)
					return
				}
			}
		case "PositiveCounts":
			var zb0011 uint32
			zb0011, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PositiveCounts")
				return
			}
			if cap(z.PositiveCounts) >= int(zb0011) {
				z.PositiveCounts = (z.PositiveCounts)[:zb0011]
			} else {
				z.PositiveCounts = make([]float64, zb0011)
			}
			for za0006 := range z.PositiveCounts {
				z.PositiveCounts[za0006], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "PositiveCounts", za0006)
					return
				}
			}
		case "ResetHint":
			z.ResetHint, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "ResetHint")
				return
			}
		case "TimestampMillisecond":
			z.TimestampMillisecond, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TimestampMillisecond")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FloatHistogram) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "Count"
	err = en.Append(0x8d, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	// map header, size 3
	// write "IsInt"
	err = en.Append(0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Count.IsInt)
	if err != nil {
		err = msgp.WrapError(err, "Count", "IsInt")
		return
	}
	// write "IntValue"
	err = en.Append(0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Count.IntValue)
	if err != nil {
		err = msgp.WrapError(err, "Count", "IntValue")
		return
	}
	// write "FloatValue"
	err = en.Append(0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Count.FloatValue)
	if err != nil {
		err = msgp.WrapError(err, "Count", "FloatValue")
		return
	}
	// write "Sum"
	err = en.Append(0xa3, 0x53, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Sum)
	if err != nil {
		err = msgp.WrapError(err, "Sum")
		return
	}
	// write "Schema"
	err = en.Append(0xa6, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Schema)
	if err != nil {
		err = msgp.WrapError(err, "Schema")
		return
	}
	// write "ZeroThreshold"
	err = en.Append(0xad, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.ZeroThreshold)
	if err != nil {
		err = msgp.WrapError(err, "ZeroThreshold")
		return
	}
	// write "ZeroCount"
	err = en.Append(0xa9, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	// map header, size 3
	// write "IsInt"
	err = en.Append(0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.ZeroCount.IsInt)
	if err != nil {
		err = msgp.WrapError(err, "ZeroCount", "IsInt")
		return
	}
	// write "IntValue"
	err = en.Append(0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ZeroCount.IntValue)
	if err != nil {
		err = msgp.WrapError(err, "ZeroCount", "IntValue")
		return
	}
	// write "FloatValue"
	err = en.Append(0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.ZeroCount.FloatValue)
	if err != nil {
		err = msgp.WrapError(err, "ZeroCount", "FloatValue")
		return
	}
	// write "NegativeSpans"
	err = en.Append(0xad, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NegativeSpans)))
	if err != nil {
		err = msgp.WrapError(err, "NegativeSpans")
		return
	}
	for za0001 := range z.NegativeSpans {
		// map header, size 2
		// write "Offset"
		err = en.Append(0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.NegativeSpans[za0001].Offset)
		if err != nil {
			err = msgp.WrapError(err, "NegativeSpans", za0001, "Offset")
			return
		}
		// write "Length"
		err = en.Append(0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.NegativeSpans[za0001].Length)
		if err != nil {
			err = msgp.WrapError(err, "NegativeSpans", za0001, "Length")
			return
		}
	}
	// write "NegativeDeltas"
	err = en.Append(0xae, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NegativeDeltas)))
	if err != nil {
		err = msgp.WrapError(err, "NegativeDeltas")
		return
	}
	for za0002 := range z.NegativeDeltas {
		err = en.WriteInt64(z.NegativeDeltas[za0002])
		if err != nil {
			err = msgp.WrapError(err, "NegativeDeltas", za0002)
			return
		}
	}
	// write "NegativeCounts"
	err = en.Append(0xae, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NegativeCounts)))
	if err != nil {
		err = msgp.WrapError(err, "NegativeCounts")
		return
	}
	for za0003 := range z.NegativeCounts {
		err = en.WriteFloat64(z.NegativeCounts[za0003])
		if err != nil {
			err = msgp.WrapError(err, "NegativeCounts", za0003)
			return
		}
	}
	// write "PositiveSpans"
	err = en.Append(0xad, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PositiveSpans)))
	if err != nil {
		err = msgp.WrapError(err, "PositiveSpans")
		return
	}
	for za0004 := range z.PositiveSpans {
		// map header, size 2
		// write "Offset"
		err = en.Append(0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.PositiveSpans[za0004].Offset)
		if err != nil {
			err = msgp.WrapError(err, "PositiveSpans", za0004, "Offset")
			return
		}
		// write "Length"
		err = en.Append(0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.PositiveSpans[za0004].Length)
		if err != nil {
			err = msgp.WrapError(err, "PositiveSpans", za0004, "Length")
			return
		}
	}
	// write "PositiveDeltas"
	err = en.Append(0xae, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PositiveDeltas)))
	if err != nil {
		err = msgp.WrapError(err, "PositiveDeltas")
		return
	}
	for za0005 := range z.PositiveDeltas {
		err = en.WriteInt64(z.PositiveDeltas[za0005])
		if err != nil {
			err = msgp.WrapError(err, "PositiveDeltas", za0005)
			return
		}
	}
	// write "PositiveCounts"
	err = en.Append(0xae, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PositiveCounts)))
	if err != nil {
		err = msgp.WrapError(err, "PositiveCounts")
		return
	}
	for za0006 := range z.PositiveCounts {
		err = en.WriteFloat64(z.PositiveCounts[za0006])
		if err != nil {
			err = msgp.WrapError(err, "PositiveCounts", za0006)
			return
		}
	}
	// write "ResetHint"
	err = en.Append(0xa9, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.ResetHint)
	if err != nil {
		err = msgp.WrapError(err, "ResetHint")
		return
	}
	// write "TimestampMillisecond"
	err = en.Append(0xb4, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.TimestampMillisecond)
	if err != nil {
		err = msgp.WrapError(err, "TimestampMillisecond")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FloatHistogram) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "Count"
	o = append(o, 0x8d, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	// map header, size 3
	// string "IsInt"
	o = append(o, 0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.Count.IsInt)
	// string "IntValue"
	o = append(o, 0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendUint64(o, z.Count.IntValue)
	// string "FloatValue"
	o = append(o, 0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendFloat64(o, z.Count.FloatValue)
	// string "Sum"
	o = append(o, 0xa3, 0x53, 0x75, 0x6d)
	o = msgp.AppendFloat64(o, z.Sum)
	// string "Schema"
	o = append(o, 0xa6, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61)
	o = msgp.AppendInt32(o, z.Schema)
	// string "ZeroThreshold"
	o = append(o, 0xad, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	o = msgp.AppendFloat64(o, z.ZeroThreshold)
	// string "ZeroCount"
	o = append(o, 0xa9, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	// map header, size 3
	// string "IsInt"
	o = append(o, 0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.ZeroCount.IsInt)
	// string "IntValue"
	o = append(o, 0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendUint64(o, z.ZeroCount.IntValue)
	// string "FloatValue"
	o = append(o, 0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendFloat64(o, z.ZeroCount.FloatValue)
	// string "NegativeSpans"
	o = append(o, 0xad, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NegativeSpans)))
	for za0001 := range z.NegativeSpans {
		// map header, size 2
		// string "Offset"
		o = append(o, 0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		o = msgp.AppendInt32(o, z.NegativeSpans[za0001].Offset)
		// string "Length"
		o = append(o, 0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		o = msgp.AppendUint32(o, z.NegativeSpans[za0001].Length)
	}
	// string "NegativeDeltas"
	o = append(o, 0xae, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NegativeDeltas)))
	for za0002 := range z.NegativeDeltas {
		o = msgp.AppendInt64(o, z.NegativeDeltas[za0002])
	}
	// string "NegativeCounts"
	o = append(o, 0xae, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NegativeCounts)))
	for za0003 := range z.NegativeCounts {
		o = msgp.AppendFloat64(o, z.NegativeCounts[za0003])
	}
	// string "PositiveSpans"
	o = append(o, 0xad, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PositiveSpans)))
	for za0004 := range z.PositiveSpans {
		// map header, size 2
		// string "Offset"
		o = append(o, 0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		o = msgp.AppendInt32(o, z.PositiveSpans[za0004].Offset)
		// string "Length"
		o = append(o, 0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		o = msgp.AppendUint32(o, z.PositiveSpans[za0004].Length)
	}
	// string "PositiveDeltas"
	o = append(o, 0xae, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PositiveDeltas)))
	for za0005 := range z.PositiveDeltas {
		o = msgp.AppendInt64(o, z.PositiveDeltas[za0005])
	}
	// string "PositiveCounts"
	o = append(o, 0xae, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PositiveCounts)))
	for za0006 := range z.PositiveCounts {
		o = msgp.AppendFloat64(o, z.PositiveCounts[za0006])
	}
	// string "ResetHint"
	o = append(o, 0xa9, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x69, 0x6e, 0x74)
	o = msgp.AppendInt32(o, z.ResetHint)
	// string "TimestampMillisecond"
	o = append(o, 0xb4, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64)
	o = msgp.AppendInt64(o, z.TimestampMillisecond)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FloatHistogram) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Count":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
				switch msgp.UnsafeString(field) {
				case "IsInt":
					z.Count.IsInt, bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Count", "IsInt")
						return
					}
				case "IntValue":
					z.Count.IntValue, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Count", "IntValue")
						return
					}
				case "FloatValue":
					z.Count.FloatValue, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Count", "FloatValue")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Count")
						return
					}
				}
			}
		case "Sum":
			z.Sum, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
		case "Schema":
			z.Schema, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Schema")
				return
			}
		case "ZeroThreshold":
			z.ZeroThreshold, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ZeroThreshold")
				return
			}
		case "ZeroCount":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ZeroCount")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "ZeroCount")
					return
				}
				switch msgp.UnsafeString(field) {
				case "IsInt":
					z.ZeroCount.IsInt, bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "IsInt")
						return
					}
				case "IntValue":
					z.ZeroCount.IntValue, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "IntValue")
						return
					}
				case "FloatValue":
					z.ZeroCount.FloatValue, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "FloatValue")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount")
						return
					}
				}
			}
		case "NegativeSpans":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NegativeSpans")
				return
			}
			if cap(z.NegativeSpans) >= int(zb0004) {
				z.NegativeSpans = (z.NegativeSpans)[:zb0004]
			} else {
				z.NegativeSpans = make([]BucketSpan, zb0004)
			}
			for za0001 := range z.NegativeSpans {
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NegativeSpans", za0001)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "NegativeSpans", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Offset":
						z.NegativeSpans[za0001].Offset, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001, "Offset")
							return
						}
					case "Length":
						z.NegativeSpans[za0001].Length, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001, "Length")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001)
							return
						}
					}
				}
			}
		case "NegativeDeltas":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NegativeDeltas")
				return
			}
			if cap(z.NegativeDeltas) >= int(zb0006) {
				z.NegativeDeltas = (z.NegativeDeltas)[:zb0006]
			} else {
				z.NegativeDeltas = make([]int64, zb0006)
			}
			for za0002 := range z.NegativeDeltas {
				z.NegativeDeltas[za0002], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NegativeDeltas", za0002)
					return
				}
			}
		case "NegativeCounts":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NegativeCounts")
				return
			}
			if cap(z.NegativeCounts) >= int(zb0007) {
				z.NegativeCounts = (z.NegativeCounts)[:zb0007]
			} else {
				z.NegativeCounts = make([]float64, zb0007)
			}
			for za0003 := range z.NegativeCounts {
				z.NegativeCounts[za0003], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NegativeCounts", za0003)
					return
				}
			}
		case "PositiveSpans":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PositiveSpans")
				return
			}
			if cap(z.PositiveSpans) >= int(zb0008) {
				z.PositiveSpans = (z.PositiveSpans)[:zb0008]
			} else {
				z.PositiveSpans = make([]BucketSpan, zb0008)
			}
			for za0004 := range z.PositiveSpans {
				var zb0009 uint32
				zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PositiveSpans", za0004)
					return
				}
				for zb0009 > 0 {
					zb0009--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "PositiveSpans", za0004)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Offset":
						z.PositiveSpans[za0004].Offset, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004, "Offset")
							return
						}
					case "Length":
						z.PositiveSpans[za0004].Length, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004, "Length")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004)
							return
						}
					}
				}
			}
		case "PositiveDeltas":
			var zb0010 uint32
			zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PositiveDeltas")
				return
			}
			if cap(z.PositiveDeltas) >= int(zb0010) {
				z.PositiveDeltas = (z.PositiveDeltas)[:zb0010]
			} else {
				z.PositiveDeltas = make([]int64, zb0010)
			}
			for za0005 := range z.PositiveDeltas {
				z.PositiveDeltas[za0005], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PositiveDeltas", za0005)
					return
				}
			}
		case "PositiveCounts":
			var zb0011 uint32
			zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PositiveCounts")
				return
			}
			if cap(z.PositiveCounts) >= int(zb0011) {
				z.PositiveCounts = (z.PositiveCounts)[:zb0011]
			} else {
				z.PositiveCounts = make([]float64, zb0011)
			}
			for za0006 := range z.PositiveCounts {
				z.PositiveCounts[za0006], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PositiveCounts", za0006)
					return
				}
			}
		case "ResetHint":
			z.ResetHint, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ResetHint")
				return
			}
		case "TimestampMillisecond":
			z.TimestampMillisecond, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimestampMillisecond")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FloatHistogram) Msgsize() (s int) {
	s = 1 + 6 + 1 + 6 + msgp.BoolSize + 9 + msgp.Uint64Size + 11 + msgp.Float64Size + 4 + msgp.Float64Size + 7 + msgp.Int32Size + 14 + msgp.Float64Size + 10 + 1 + 6 + msgp.BoolSize + 9 + msgp.Uint64Size + 11 + msgp.Float64Size + 14 + msgp.ArrayHeaderSize + (len(z.NegativeSpans) * (15 + msgp.Int32Size + msgp.Uint32Size)) + 15 + msgp.ArrayHeaderSize + (len(z.NegativeDeltas) * (msgp.Int64Size)) + 15 + msgp.ArrayHeaderSize + (len(z.NegativeCounts) * (msgp.Float64Size)) + 14 + msgp.ArrayHeaderSize + (len(z.PositiveSpans) * (15 + msgp.Int32Size + msgp.Uint32Size)) + 15 + msgp.ArrayHeaderSize + (len(z.PositiveDeltas) * (msgp.Int64Size)) + 15 + msgp.ArrayHeaderSize + (len(z.PositiveCounts) * (msgp.Float64Size)) + 10 + msgp.Int32Size + 21 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Histogram) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Count":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
				switch msgp.UnsafeString(field) {
				case "IsInt":
					z.Count.IsInt, err = dc.ReadBool()
					if err != nil {
						err = msgp.WrapError(err, "Count", "IsInt")
						return
					}
				case "IntValue":
					z.Count.IntValue, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "Count", "IntValue")
						return
					}
				case "FloatValue":
					z.Count.FloatValue, err = dc.ReadFloat64()
					if err != nil {
						err = msgp.WrapError(err, "Count", "FloatValue")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Count")
						return
					}
				}
			}
		case "Sum":
			z.Sum, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
		case "Schema":
			z.Schema, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Schema")
				return
			}
		case "ZeroThreshold":
			z.ZeroThreshold, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "ZeroThreshold")
				return
			}
		case "ZeroCount":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ZeroCount")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "ZeroCount")
					return
				}
				switch msgp.UnsafeString(field) {
				case "IsInt":
					z.ZeroCount.IsInt, err = dc.ReadBool()
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "IsInt")
						return
					}
				case "IntValue":
					z.ZeroCount.IntValue, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "IntValue")
						return
					}
				case "FloatValue":
					z.ZeroCount.FloatValue, err = dc.ReadFloat64()
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "FloatValue")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount")
						return
					}
				}
			}
		case "NegativeSpans":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NegativeSpans")
				return
			}
			if cap(z.NegativeSpans) >= int(zb0004) {
				z.NegativeSpans = (z.NegativeSpans)[:zb0004]
			} else {
				z.NegativeSpans = make([]BucketSpan, zb0004)
			}
			for za0001 := range z.NegativeSpans {
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "NegativeSpans", za0001)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "NegativeSpans", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Offset":
						z.NegativeSpans[za0001].Offset, err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001, "Offset")
							return
						}
					case "Length":
						z.NegativeSpans[za0001].Length, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001, "Length")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001)
							return
						}
					}
				}
			}
		case "NegativeBuckets":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NegativeBuckets")
				return
			}
			if cap(z.NegativeBuckets) >= int(zb0006) {
				z.NegativeBuckets = (z.NegativeBuckets)[:zb0006]
			} else {
				z.NegativeBuckets = make([]int64, zb0006)
			}
			for za0002 := range z.NegativeBuckets {
				z.NegativeBuckets[za0002], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "NegativeBuckets", za0002)
					return
				}
			}
		case "NegativeCounts":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NegativeCounts")
				return
			}
			if cap(z.NegativeCounts) >= int(zb0007) {
				z.NegativeCounts = (z.NegativeCounts)[:zb0007]
			} else {
				z.NegativeCounts = make([]float64, zb0007)
			}
			for za0003 := range z.NegativeCounts {
				z.NegativeCounts[za0003], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "NegativeCounts", za0003)
					return
				}
			}
		case "PositiveSpans":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PositiveSpans")
				return
			}
			if cap(z.PositiveSpans) >= int(zb0008) {
				z.PositiveSpans = (z.PositiveSpans)[:zb0008]
			} else {
				z.PositiveSpans = make([]BucketSpan, zb0008)
			}
			for za0004 := range z.PositiveSpans {
				var zb0009 uint32
				zb0009, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "PositiveSpans", za0004)
					return
				}
				for zb0009 > 0 {
					zb0009--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "PositiveSpans", za0004)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Offset":
						z.PositiveSpans[za0004].Offset, err = dc.ReadInt32()
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004, "Offset")
							return
						}
					case "Length":
						z.PositiveSpans[za0004].Length, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004, "Length")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004)
							return
						}
					}
				}
			}
		case "PositiveBuckets":
			var zb0010 uint32
			zb0010, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PositiveBuckets")
				return
			}
			if cap(z.PositiveBuckets) >= int(zb0010) {
				z.PositiveBuckets = (z.PositiveBuckets)[:zb0010]
			} else {
				z.PositiveBuckets = make([]int64, zb0010)
			}
			for za0005 := range z.PositiveBuckets {
				z.PositiveBuckets[za0005], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "PositiveBuckets", za0005)
					return
				}
			}
		case "PositiveCounts":
			var zb0011 uint32
			zb0011, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PositiveCounts")
				return
			}
			if cap(z.PositiveCounts) >= int(zb0011) {
				z.PositiveCounts = (z.PositiveCounts)[:zb0011]
			} else {
				z.PositiveCounts = make([]float64, zb0011)
			}
			for za0006 := range z.PositiveCounts {
				z.PositiveCounts[za0006], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "PositiveCounts", za0006)
					return
				}
			}
		case "ResetHint":
			z.ResetHint, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "ResetHint")
				return
			}
		case "TimestampMillisecond":
			z.TimestampMillisecond, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TimestampMillisecond")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Histogram) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "Count"
	err = en.Append(0x8d, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	// map header, size 3
	// write "IsInt"
	err = en.Append(0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Count.IsInt)
	if err != nil {
		err = msgp.WrapError(err, "Count", "IsInt")
		return
	}
	// write "IntValue"
	err = en.Append(0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Count.IntValue)
	if err != nil {
		err = msgp.WrapError(err, "Count", "IntValue")
		return
	}
	// write "FloatValue"
	err = en.Append(0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Count.FloatValue)
	if err != nil {
		err = msgp.WrapError(err, "Count", "FloatValue")
		return
	}
	// write "Sum"
	err = en.Append(0xa3, 0x53, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Sum)
	if err != nil {
		err = msgp.WrapError(err, "Sum")
		return
	}
	// write "Schema"
	err = en.Append(0xa6, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Schema)
	if err != nil {
		err = msgp.WrapError(err, "Schema")
		return
	}
	// write "ZeroThreshold"
	err = en.Append(0xad, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.ZeroThreshold)
	if err != nil {
		err = msgp.WrapError(err, "ZeroThreshold")
		return
	}
	// write "ZeroCount"
	err = en.Append(0xa9, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	// map header, size 3
	// write "IsInt"
	err = en.Append(0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.ZeroCount.IsInt)
	if err != nil {
		err = msgp.WrapError(err, "ZeroCount", "IsInt")
		return
	}
	// write "IntValue"
	err = en.Append(0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ZeroCount.IntValue)
	if err != nil {
		err = msgp.WrapError(err, "ZeroCount", "IntValue")
		return
	}
	// write "FloatValue"
	err = en.Append(0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.ZeroCount.FloatValue)
	if err != nil {
		err = msgp.WrapError(err, "ZeroCount", "FloatValue")
		return
	}
	// write "NegativeSpans"
	err = en.Append(0xad, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NegativeSpans)))
	if err != nil {
		err = msgp.WrapError(err, "NegativeSpans")
		return
	}
	for za0001 := range z.NegativeSpans {
		// map header, size 2
		// write "Offset"
		err = en.Append(0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.NegativeSpans[za0001].Offset)
		if err != nil {
			err = msgp.WrapError(err, "NegativeSpans", za0001, "Offset")
			return
		}
		// write "Length"
		err = en.Append(0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.NegativeSpans[za0001].Length)
		if err != nil {
			err = msgp.WrapError(err, "NegativeSpans", za0001, "Length")
			return
		}
	}
	// write "NegativeBuckets"
	err = en.Append(0xaf, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NegativeBuckets)))
	if err != nil {
		err = msgp.WrapError(err, "NegativeBuckets")
		return
	}
	for za0002 := range z.NegativeBuckets {
		err = en.WriteInt64(z.NegativeBuckets[za0002])
		if err != nil {
			err = msgp.WrapError(err, "NegativeBuckets", za0002)
			return
		}
	}
	// write "NegativeCounts"
	err = en.Append(0xae, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NegativeCounts)))
	if err != nil {
		err = msgp.WrapError(err, "NegativeCounts")
		return
	}
	for za0003 := range z.NegativeCounts {
		err = en.WriteFloat64(z.NegativeCounts[za0003])
		if err != nil {
			err = msgp.WrapError(err, "NegativeCounts", za0003)
			return
		}
	}
	// write "PositiveSpans"
	err = en.Append(0xad, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PositiveSpans)))
	if err != nil {
		err = msgp.WrapError(err, "PositiveSpans")
		return
	}
	for za0004 := range z.PositiveSpans {
		// map header, size 2
		// write "Offset"
		err = en.Append(0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.PositiveSpans[za0004].Offset)
		if err != nil {
			err = msgp.WrapError(err, "PositiveSpans", za0004, "Offset")
			return
		}
		// write "Length"
		err = en.Append(0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.PositiveSpans[za0004].Length)
		if err != nil {
			err = msgp.WrapError(err, "PositiveSpans", za0004, "Length")
			return
		}
	}
	// write "PositiveBuckets"
	err = en.Append(0xaf, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PositiveBuckets)))
	if err != nil {
		err = msgp.WrapError(err, "PositiveBuckets")
		return
	}
	for za0005 := range z.PositiveBuckets {
		err = en.WriteInt64(z.PositiveBuckets[za0005])
		if err != nil {
			err = msgp.WrapError(err, "PositiveBuckets", za0005)
			return
		}
	}
	// write "PositiveCounts"
	err = en.Append(0xae, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PositiveCounts)))
	if err != nil {
		err = msgp.WrapError(err, "PositiveCounts")
		return
	}
	for za0006 := range z.PositiveCounts {
		err = en.WriteFloat64(z.PositiveCounts[za0006])
		if err != nil {
			err = msgp.WrapError(err, "PositiveCounts", za0006)
			return
		}
	}
	// write "ResetHint"
	err = en.Append(0xa9, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.ResetHint)
	if err != nil {
		err = msgp.WrapError(err, "ResetHint")
		return
	}
	// write "TimestampMillisecond"
	err = en.Append(0xb4, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.TimestampMillisecond)
	if err != nil {
		err = msgp.WrapError(err, "TimestampMillisecond")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Histogram) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "Count"
	o = append(o, 0x8d, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	// map header, size 3
	// string "IsInt"
	o = append(o, 0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.Count.IsInt)
	// string "IntValue"
	o = append(o, 0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendUint64(o, z.Count.IntValue)
	// string "FloatValue"
	o = append(o, 0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendFloat64(o, z.Count.FloatValue)
	// string "Sum"
	o = append(o, 0xa3, 0x53, 0x75, 0x6d)
	o = msgp.AppendFloat64(o, z.Sum)
	// string "Schema"
	o = append(o, 0xa6, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61)
	o = msgp.AppendInt32(o, z.Schema)
	// string "ZeroThreshold"
	o = append(o, 0xad, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	o = msgp.AppendFloat64(o, z.ZeroThreshold)
	// string "ZeroCount"
	o = append(o, 0xa9, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	// map header, size 3
	// string "IsInt"
	o = append(o, 0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.ZeroCount.IsInt)
	// string "IntValue"
	o = append(o, 0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendUint64(o, z.ZeroCount.IntValue)
	// string "FloatValue"
	o = append(o, 0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendFloat64(o, z.ZeroCount.FloatValue)
	// string "NegativeSpans"
	o = append(o, 0xad, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NegativeSpans)))
	for za0001 := range z.NegativeSpans {
		// map header, size 2
		// string "Offset"
		o = append(o, 0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		o = msgp.AppendInt32(o, z.NegativeSpans[za0001].Offset)
		// string "Length"
		o = append(o, 0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		o = msgp.AppendUint32(o, z.NegativeSpans[za0001].Length)
	}
	// string "NegativeBuckets"
	o = append(o, 0xaf, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NegativeBuckets)))
	for za0002 := range z.NegativeBuckets {
		o = msgp.AppendInt64(o, z.NegativeBuckets[za0002])
	}
	// string "NegativeCounts"
	o = append(o, 0xae, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NegativeCounts)))
	for za0003 := range z.NegativeCounts {
		o = msgp.AppendFloat64(o, z.NegativeCounts[za0003])
	}
	// string "PositiveSpans"
	o = append(o, 0xad, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PositiveSpans)))
	for za0004 := range z.PositiveSpans {
		// map header, size 2
		// string "Offset"
		o = append(o, 0x82, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
		o = msgp.AppendInt32(o, z.PositiveSpans[za0004].Offset)
		// string "Length"
		o = append(o, 0xa6, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		o = msgp.AppendUint32(o, z.PositiveSpans[za0004].Length)
	}
	// string "PositiveBuckets"
	o = append(o, 0xaf, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PositiveBuckets)))
	for za0005 := range z.PositiveBuckets {
		o = msgp.AppendInt64(o, z.PositiveBuckets[za0005])
	}
	// string "PositiveCounts"
	o = append(o, 0xae, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PositiveCounts)))
	for za0006 := range z.PositiveCounts {
		o = msgp.AppendFloat64(o, z.PositiveCounts[za0006])
	}
	// string "ResetHint"
	o = append(o, 0xa9, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x69, 0x6e, 0x74)
	o = msgp.AppendInt32(o, z.ResetHint)
	// string "TimestampMillisecond"
	o = append(o, 0xb4, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64)
	o = msgp.AppendInt64(o, z.TimestampMillisecond)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Histogram) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Count":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Count")
					return
				}
				switch msgp.UnsafeString(field) {
				case "IsInt":
					z.Count.IsInt, bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Count", "IsInt")
						return
					}
				case "IntValue":
					z.Count.IntValue, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Count", "IntValue")
						return
					}
				case "FloatValue":
					z.Count.FloatValue, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Count", "FloatValue")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Count")
						return
					}
				}
			}
		case "Sum":
			z.Sum, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
		case "Schema":
			z.Schema, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Schema")
				return
			}
		case "ZeroThreshold":
			z.ZeroThreshold, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ZeroThreshold")
				return
			}
		case "ZeroCount":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ZeroCount")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "ZeroCount")
					return
				}
				switch msgp.UnsafeString(field) {
				case "IsInt":
					z.ZeroCount.IsInt, bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "IsInt")
						return
					}
				case "IntValue":
					z.ZeroCount.IntValue, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "IntValue")
						return
					}
				case "FloatValue":
					z.ZeroCount.FloatValue, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount", "FloatValue")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "ZeroCount")
						return
					}
				}
			}
		case "NegativeSpans":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NegativeSpans")
				return
			}
			if cap(z.NegativeSpans) >= int(zb0004) {
				z.NegativeSpans = (z.NegativeSpans)[:zb0004]
			} else {
				z.NegativeSpans = make([]BucketSpan, zb0004)
			}
			for za0001 := range z.NegativeSpans {
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NegativeSpans", za0001)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "NegativeSpans", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Offset":
						z.NegativeSpans[za0001].Offset, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001, "Offset")
							return
						}
					case "Length":
						z.NegativeSpans[za0001].Length, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001, "Length")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "NegativeSpans", za0001)
							return
						}
					}
				}
			}
		case "NegativeBuckets":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NegativeBuckets")
				return
			}
			if cap(z.NegativeBuckets) >= int(zb0006) {
				z.NegativeBuckets = (z.NegativeBuckets)[:zb0006]
			} else {
				z.NegativeBuckets = make([]int64, zb0006)
			}
			for za0002 := range z.NegativeBuckets {
				z.NegativeBuckets[za0002], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NegativeBuckets", za0002)
					return
				}
			}
		case "NegativeCounts":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NegativeCounts")
				return
			}
			if cap(z.NegativeCounts) >= int(zb0007) {
				z.NegativeCounts = (z.NegativeCounts)[:zb0007]
			} else {
				z.NegativeCounts = make([]float64, zb0007)
			}
			for za0003 := range z.NegativeCounts {
				z.NegativeCounts[za0003], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NegativeCounts", za0003)
					return
				}
			}
		case "PositiveSpans":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PositiveSpans")
				return
			}
			if cap(z.PositiveSpans) >= int(zb0008) {
				z.PositiveSpans = (z.PositiveSpans)[:zb0008]
			} else {
				z.PositiveSpans = make([]BucketSpan, zb0008)
			}
			for za0004 := range z.PositiveSpans {
				var zb0009 uint32
				zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PositiveSpans", za0004)
					return
				}
				for zb0009 > 0 {
					zb0009--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "PositiveSpans", za0004)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Offset":
						z.PositiveSpans[za0004].Offset, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004, "Offset")
							return
						}
					case "Length":
						z.PositiveSpans[za0004].Length, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004, "Length")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "PositiveSpans", za0004)
							return
						}
					}
				}
			}
		case "PositiveBuckets":
			var zb0010 uint32
			zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PositiveBuckets")
				return
			}
			if cap(z.PositiveBuckets) >= int(zb0010) {
				z.PositiveBuckets = (z.PositiveBuckets)[:zb0010]
			} else {
				z.PositiveBuckets = make([]int64, zb0010)
			}
			for za0005 := range z.PositiveBuckets {
				z.PositiveBuckets[za0005], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PositiveBuckets", za0005)
					return
				}
			}
		case "PositiveCounts":
			var zb0011 uint32
			zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PositiveCounts")
				return
			}
			if cap(z.PositiveCounts) >= int(zb0011) {
				z.PositiveCounts = (z.PositiveCounts)[:zb0011]
			} else {
				z.PositiveCounts = make([]float64, zb0011)
			}
			for za0006 := range z.PositiveCounts {
				z.PositiveCounts[za0006], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PositiveCounts", za0006)
					return
				}
			}
		case "ResetHint":
			z.ResetHint, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ResetHint")
				return
			}
		case "TimestampMillisecond":
			z.TimestampMillisecond, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimestampMillisecond")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Histogram) Msgsize() (s int) {
	s = 1 + 6 + 1 + 6 + msgp.BoolSize + 9 + msgp.Uint64Size + 11 + msgp.Float64Size + 4 + msgp.Float64Size + 7 + msgp.Int32Size + 14 + msgp.Float64Size + 10 + 1 + 6 + msgp.BoolSize + 9 + msgp.Uint64Size + 11 + msgp.Float64Size + 14 + msgp.ArrayHeaderSize + (len(z.NegativeSpans) * (15 + msgp.Int32Size + msgp.Uint32Size)) + 16 + msgp.ArrayHeaderSize + (len(z.NegativeBuckets) * (msgp.Int64Size)) + 15 + msgp.ArrayHeaderSize + (len(z.NegativeCounts) * (msgp.Float64Size)) + 14 + msgp.ArrayHeaderSize + (len(z.PositiveSpans) * (15 + msgp.Int32Size + msgp.Uint32Size)) + 16 + msgp.ArrayHeaderSize + (len(z.PositiveBuckets) * (msgp.Int64Size)) + 15 + msgp.ArrayHeaderSize + (len(z.PositiveCounts) * (msgp.Float64Size)) + 10 + msgp.Int32Size + 21 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HistogramCount) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsInt":
			z.IsInt, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsInt")
				return
			}
		case "IntValue":
			z.IntValue, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "IntValue")
				return
			}
		case "FloatValue":
			z.FloatValue, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "FloatValue")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HistogramCount) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "IsInt"
	err = en.Append(0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsInt)
	if err != nil {
		err = msgp.WrapError(err, "IsInt")
		return
	}
	// write "IntValue"
	err = en.Append(0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.IntValue)
	if err != nil {
		err = msgp.WrapError(err, "IntValue")
		return
	}
	// write "FloatValue"
	err = en.Append(0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.FloatValue)
	if err != nil {
		err = msgp.WrapError(err, "FloatValue")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HistogramCount) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "IsInt"
	o = append(o, 0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.IsInt)
	// string "IntValue"
	o = append(o, 0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendUint64(o, z.IntValue)
	// string "FloatValue"
	o = append(o, 0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendFloat64(o, z.FloatValue)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HistogramCount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsInt":
			z.IsInt, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsInt")
				return
			}
		case "IntValue":
			z.IntValue, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IntValue")
				return
			}
		case "FloatValue":
			z.FloatValue, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FloatValue")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HistogramCount) Msgsize() (s int) {
	s = 1 + 6 + msgp.BoolSize + 9 + msgp.Uint64Size + 11 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HistogramZeroCount) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsInt":
			z.IsInt, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsInt")
				return
			}
		case "IntValue":
			z.IntValue, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "IntValue")
				return
			}
		case "FloatValue":
			z.FloatValue, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "FloatValue")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HistogramZeroCount) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "IsInt"
	err = en.Append(0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsInt)
	if err != nil {
		err = msgp.WrapError(err, "IsInt")
		return
	}
	// write "IntValue"
	err = en.Append(0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.IntValue)
	if err != nil {
		err = msgp.WrapError(err, "IntValue")
		return
	}
	// write "FloatValue"
	err = en.Append(0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.FloatValue)
	if err != nil {
		err = msgp.WrapError(err, "FloatValue")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HistogramZeroCount) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "IsInt"
	o = append(o, 0x83, 0xa5, 0x49, 0x73, 0x49, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.IsInt)
	// string "IntValue"
	o = append(o, 0xa8, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendUint64(o, z.IntValue)
	// string "FloatValue"
	o = append(o, 0xaa, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendFloat64(o, z.FloatValue)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HistogramZeroCount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsInt":
			z.IsInt, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsInt")
				return
			}
		case "IntValue":
			z.IntValue, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IntValue")
				return
			}
		case "FloatValue":
			z.FloatValue, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FloatValue")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HistogramZeroCount) Msgsize() (s int) {
	s = 1 + 6 + msgp.BoolSize + 9 + msgp.Uint64Size + 11 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Histograms) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Histogram":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Histogram")
					return
				}
				z.Histogram = nil
			} else {
				if z.Histogram == nil {
					z.Histogram = new(Histogram)
				}
				err = z.Histogram.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Histogram")
					return
				}
			}
		case "FloatHistogram":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FloatHistogram")
					return
				}
				z.FloatHistogram = nil
			} else {
				if z.FloatHistogram == nil {
					z.FloatHistogram = new(FloatHistogram)
				}
				err = z.FloatHistogram.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "FloatHistogram")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Histograms) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Histogram"
	err = en.Append(0x82, 0xa9, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	if z.Histogram == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Histogram.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Histogram")
			return
		}
	}
	// write "FloatHistogram"
	err = en.Append(0xae, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	if z.FloatHistogram == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.FloatHistogram.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "FloatHistogram")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Histograms) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Histogram"
	o = append(o, 0x82, 0xa9, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d)
	if z.Histogram == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Histogram.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Histogram")
			return
		}
	}
	// string "FloatHistogram"
	o = append(o, 0xae, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d)
	if z.FloatHistogram == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.FloatHistogram.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "FloatHistogram")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Histograms) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Histogram":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Histogram = nil
			} else {
				if z.Histogram == nil {
					z.Histogram = new(Histogram)
				}
				bts, err = z.Histogram.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Histogram")
					return
				}
			}
		case "FloatHistogram":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FloatHistogram = nil
			} else {
				if z.FloatHistogram == nil {
					z.FloatHistogram = new(FloatHistogram)
				}
				bts, err = z.FloatHistogram.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "FloatHistogram")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Histograms) Msgsize() (s int) {
	s = 1 + 10
	if z.Histogram == nil {
		s += msgp.NilSize
	} else {
		s += z.Histogram.Msgsize()
	}
	s += 15
	if z.FloatHistogram == nil {
		s += msgp.NilSize
	} else {
		s += z.FloatHistogram.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SeriesGroup) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Strings":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Strings")
				return
			}
			if cap(z.Strings) >= int(zb0002) {
				z.Strings = (z.Strings)[:zb0002]
			} else {
				z.Strings = make([]string, zb0002)
			}
			for za0001 := range z.Strings {
				z.Strings[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Strings", za0001)
					return
				}
			}
		case "Series":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Series")
				return
			}
			if cap(z.Series) >= int(zb0003) {
				z.Series = (z.Series)[:zb0003]
			} else {
				z.Series = make([]*TimeSeriesBinary, zb0003)
			}
			for za0002 := range z.Series {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Series", za0002)
						return
					}
					z.Series[za0002] = nil
				} else {
					if z.Series[za0002] == nil {
						z.Series[za0002] = new(TimeSeriesBinary)
					}
					err = z.Series[za0002].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Series", za0002)
						return
					}
				}
			}
		case "Metadata":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if cap(z.Metadata) >= int(zb0004) {
				z.Metadata = (z.Metadata)[:zb0004]
			} else {
				z.Metadata = make([]*TimeSeriesBinary, zb0004)
			}
			for za0003 := range z.Metadata {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Metadata", za0003)
						return
					}
					z.Metadata[za0003] = nil
				} else {
					if z.Metadata[za0003] == nil {
						z.Metadata[za0003] = new(TimeSeriesBinary)
					}
					err = z.Metadata[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Metadata", za0003)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SeriesGroup) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Strings"
	err = en.Append(0x83, 0xa7, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Strings)))
	if err != nil {
		err = msgp.WrapError(err, "Strings")
		return
	}
	for za0001 := range z.Strings {
		err = en.WriteString(z.Strings[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Strings", za0001)
			return
		}
	}
	// write "Series"
	err = en.Append(0xa6, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Series)))
	if err != nil {
		err = msgp.WrapError(err, "Series")
		return
	}
	for za0002 := range z.Series {
		if z.Series[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Series[za0002].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Series", za0002)
				return
			}
		}
	}
	// write "Metadata"
	err = en.Append(0xa8, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Metadata)))
	if err != nil {
		err = msgp.WrapError(err, "Metadata")
		return
	}
	for za0003 := range z.Metadata {
		if z.Metadata[za0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Metadata[za0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Metadata", za0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SeriesGroup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Strings"
	o = append(o, 0x83, 0xa7, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Strings)))
	for za0001 := range z.Strings {
		o = msgp.AppendString(o, z.Strings[za0001])
	}
	// string "Series"
	o = append(o, 0xa6, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Series)))
	for za0002 := range z.Series {
		if z.Series[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Series[za0002].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Series", za0002)
				return
			}
		}
	}
	// string "Metadata"
	o = append(o, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Metadata)))
	for za0003 := range z.Metadata {
		if z.Metadata[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Metadata[za0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Metadata", za0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SeriesGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Strings":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Strings")
				return
			}
			if cap(z.Strings) >= int(zb0002) {
				z.Strings = (z.Strings)[:zb0002]
			} else {
				z.Strings = make([]string, zb0002)
			}
			for za0001 := range z.Strings {
				z.Strings[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Strings", za0001)
					return
				}
			}
		case "Series":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Series")
				return
			}
			if cap(z.Series) >= int(zb0003) {
				z.Series = (z.Series)[:zb0003]
			} else {
				z.Series = make([]*TimeSeriesBinary, zb0003)
			}
			for za0002 := range z.Series {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Series[za0002] = nil
				} else {
					if z.Series[za0002] == nil {
						z.Series[za0002] = new(TimeSeriesBinary)
					}
					bts, err = z.Series[za0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Series", za0002)
						return
					}
				}
			}
		case "Metadata":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if cap(z.Metadata) >= int(zb0004) {
				z.Metadata = (z.Metadata)[:zb0004]
			} else {
				z.Metadata = make([]*TimeSeriesBinary, zb0004)
			}
			for za0003 := range z.Metadata {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Metadata[za0003] = nil
				} else {
					if z.Metadata[za0003] == nil {
						z.Metadata[za0003] = new(TimeSeriesBinary)
					}
					bts, err = z.Metadata[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Metadata", za0003)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SeriesGroup) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Strings {
		s += msgp.StringPrefixSize + len(z.Strings[za0001])
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0002 := range z.Series {
		if z.Series[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.Series[za0002].Msgsize()
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0003 := range z.Metadata {
		if z.Metadata[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += z.Metadata[za0003].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TimeSeriesBinary) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LabelsNames":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "LabelsNames")
				return
			}
			if cap(z.LabelsNames) >= int(zb0002) {
				z.LabelsNames = (z.LabelsNames)[:zb0002]
			} else {
				z.LabelsNames = make([]uint32, zb0002)
			}
			for za0001 := range z.LabelsNames {
				z.LabelsNames[za0001], err = dc.ReadUint32()
				if err != nil {
					err = msgp.WrapError(err, "LabelsNames", za0001)
					return
				}
			}
		case "LabelsValues":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "LabelsValues")
				return
			}
			if cap(z.LabelsValues) >= int(zb0003) {
				z.LabelsValues = (z.LabelsValues)[:zb0003]
			} else {
				z.LabelsValues = make([]uint32, zb0003)
			}
			for za0002 := range z.LabelsValues {
				z.LabelsValues[za0002], err = dc.ReadUint32()
				if err != nil {
					err = msgp.WrapError(err, "LabelsValues", za0002)
					return
				}
			}
		case "TS":
			z.TS, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TS")
				return
			}
		case "Value":
			z.Value, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "Hash":
			z.Hash, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "Histograms":
			err = z.Histograms.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Histograms")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TimeSeriesBinary) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "LabelsNames"
	err = en.Append(0x86, 0xab, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.LabelsNames)))
	if err != nil {
		err = msgp.WrapError(err, "LabelsNames")
		return
	}
	for za0001 := range z.LabelsNames {
		err = en.WriteUint32(z.LabelsNames[za0001])
		if err != nil {
			err = msgp.WrapError(err, "LabelsNames", za0001)
			return
		}
	}
	// write "LabelsValues"
	err = en.Append(0xac, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.LabelsValues)))
	if err != nil {
		err = msgp.WrapError(err, "LabelsValues")
		return
	}
	for za0002 := range z.LabelsValues {
		err = en.WriteUint32(z.LabelsValues[za0002])
		if err != nil {
			err = msgp.WrapError(err, "LabelsValues", za0002)
			return
		}
	}
	// write "TS"
	err = en.Append(0xa2, 0x54, 0x53)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.TS)
	if err != nil {
		err = msgp.WrapError(err, "TS")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	// write "Hash"
	err = en.Append(0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "Histograms"
	err = en.Append(0xaa, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = z.Histograms.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Histograms")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TimeSeriesBinary) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "LabelsNames"
	o = append(o, 0x86, 0xab, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.LabelsNames)))
	for za0001 := range z.LabelsNames {
		o = msgp.AppendUint32(o, z.LabelsNames[za0001])
	}
	// string "LabelsValues"
	o = append(o, 0xac, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.LabelsValues)))
	for za0002 := range z.LabelsValues {
		o = msgp.AppendUint32(o, z.LabelsValues[za0002])
	}
	// string "TS"
	o = append(o, 0xa2, 0x54, 0x53)
	o = msgp.AppendInt64(o, z.TS)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendFloat64(o, z.Value)
	// string "Hash"
	o = append(o, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendUint64(o, z.Hash)
	// string "Histograms"
	o = append(o, 0xaa, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73)
	o, err = z.Histograms.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Histograms")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TimeSeriesBinary) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LabelsNames":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LabelsNames")
				return
			}
			if cap(z.LabelsNames) >= int(zb0002) {
				z.LabelsNames = (z.LabelsNames)[:zb0002]
			} else {
				z.LabelsNames = make([]uint32, zb0002)
			}
			for za0001 := range z.LabelsNames {
				z.LabelsNames[za0001], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LabelsNames", za0001)
					return
				}
			}
		case "LabelsValues":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LabelsValues")
				return
			}
			if cap(z.LabelsValues) >= int(zb0003) {
				z.LabelsValues = (z.LabelsValues)[:zb0003]
			} else {
				z.LabelsValues = make([]uint32, zb0003)
			}
			for za0002 := range z.LabelsValues {
				z.LabelsValues[za0002], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LabelsValues", za0002)
					return
				}
			}
		case "TS":
			z.TS, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TS")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "Hash":
			z.Hash, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "Histograms":
			bts, err = z.Histograms.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Histograms")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TimeSeriesBinary) Msgsize() (s int) {
	s = 1 + 12 + msgp.ArrayHeaderSize + (len(z.LabelsNames) * (msgp.Uint32Size)) + 13 + msgp.ArrayHeaderSize + (len(z.LabelsValues) * (msgp.Uint32Size)) + 3 + msgp.Int64Size + 6 + msgp.Float64Size + 5 + msgp.Uint64Size + 11 + z.Histograms.Msgsize()
	return
}
